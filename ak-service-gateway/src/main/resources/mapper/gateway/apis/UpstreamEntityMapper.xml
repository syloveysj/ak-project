<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunjian.ak.gateway.entity.apis.UpstreamEntityMapper">
    <!-- 数据库中表名为:upstreams的列名 -->
    <sql id="column_sql">
        upstreams.id,
        upstreams.name,
        upstreams.algorithm,
        upstreams.slots,
        upstreams.alias,
        upstreams.created_at,
        (select string_agg(t.target,', ') from (select distinct on(target)id,created_at,target,weight from targets where upstream_id=upstreams.id order by target,created_at desc) t where t.weight!=0) targets_memo
    </sql>

    <!-- 数据库中表名为:upstreams的非空where条件 -->
    <sql id="whereClause_sql">
        <if test="id != null">and upstreams.id::text = #{id}</if>
        <if test="name != null and name != '' ">
            and upstreams.name like concat('%',#{name},'%')
        </if>
        <if test="algorithm != null">and upstreams.algorithm = #{algorithm}</if>
        <if test="slots != null">and upstreams.slots = #{slots}</if>
        <if test="alias != null and alias != '' ">
            and upstreams.alias like concat('%',#{alias},'%')
        </if>
        <if test="createdAt != null">and upstreams.created_at = #{createdAt}</if>
    </sql>

    <!-- Upstream的resultMap,column是给数据库列起的别名,它对应property类的属性 -->
    <resultMap id="result_Upstream_Map" type="com.yunjian.ak.gateway.entity.apis.UpstreamEntity">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="algorithm" property="algorithm" />
        <result column="slots" property="slots" />
        <result column="alias" property="alias" />
        <result column="created_at" property="createdAt" />
        <result column="targets_memo" property="targetsMemo" />
    </resultMap>

    <!--获得类名为:Upstream对应的数据库表满足条件的数据总行数 -->
    <select id="count" parameterType="com.yunjian.ak.gateway.entity.apis.UpstreamEntity" resultType="int">
        select count(*) from upstreams
        <where>
            <include refid="whereClause_sql"/>
        </where>
    </select>

    <!-- 通过Upstream的id将Upstream中属性值不为null的数据更新到数据库对应的表中 -->
    <update id="update" parameterType="com.yunjian.ak.gateway.entity.apis.UpstreamEntity">
        update upstreams
        <set>
            <trim suffixOverrides=",">
                <if test="alias != null">alias = #{alias},</if>
            </trim>
        </set>
        <where>
            <choose>
                <when test="id != null">and id::text = #{id}</when>
                <otherwise>and id::text = </otherwise>
            </choose>
        </where>
    </update>

    <!-- 获得一个Upstream对象,以参数Upstream对象中不为空的属性作为条件进行查询 -->
    <select id="select" parameterType="com.yunjian.ak.gateway.entity.apis.UpstreamEntity" resultMap="result_Upstream_Map">
        select
        <include refid="column_sql"/>
        from upstreams
        <where>
            <include refid="whereClause_sql"/>
        </where>
    </select>

    <!-- 查询数据库中表名为:upstreams的所有数据 -->
    <select id="selectAll" resultMap="result_Upstream_Map">
        select
        <include refid="column_sql"/>
        from upstreams
    </select>

    <!-- 通过Upstream的id获得对应数据库中表的数据对象 -->
    <select id="selectByID" parameterType="String" resultMap="result_Upstream_Map">
        select
        <include refid="column_sql"/>
        from upstreams
        where upstreams.id::text = #{id}
    </select>

    <!-- 获得一个Upstream对象,以参数Upstream对象中不为空的属性作为条件进行分页查询 -->
    <select id="selectByPage" parameterType="com.yunjian.ak.gateway.entity.apis.UpstreamEntity" resultMap="result_Upstream_Map">
        select
        <include refid="column_sql"/>
        from upstreams
        <where>
            <include refid="whereClause_sql"/>
        </where>
    </select>

</mapper>
