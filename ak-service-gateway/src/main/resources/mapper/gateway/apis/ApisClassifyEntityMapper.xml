<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunjian.ak.gateway.entity.apis.ApisClassifyEntityMapper">
    <!-- 数据库中表名为:apis_classify的列名 -->
    <sql id="column_sql">
        apis_classify.id,
        apis_classify.pid,
        apis_classify.service_id,
        apis_classify.alias,
        apis_classify.memo,
        apis_classify.created_at
    </sql>

    <!-- 数据库中表名为:apis_classify的非空where条件 -->
    <sql id="whereClause_sql">
        <if test="id != null">and apis_classify.id::text = #{id}</if>
        <if test="pid != null">and apis_classify.pid::text = #{pid}</if>
        <if test="serviceId != null">and apis_classify.service_id::text = #{serviceId}</if>
        <if test="alias != null">and apis_classify.alias = #{alias}</if>
        <if test="memo != null">and apis_classify.memo = #{memo}</if>
        <if test="createdAt != null">and apis_classify.created_at = #{createdAt}</if>
    </sql>

    <!-- ApisClassify的resultMap,column是给数据库列起的别名,它对应property类的属性 -->
    <resultMap id="result_ApisClassify_Map" type="com.yunjian.ak.gateway.entity.apis.ApisClassifyEntity">
        <id column="id" property="id" />
        <result column="pid" property="pid" />
        <result column="service_id" property="serviceId" />
        <result column="alias" property="alias" />
        <result column="memo" property="memo" />
        <result column="created_at" property="createdAt" />
    </resultMap>

    <!-- 将ApisClassify中属性值不为null的数据,插入到对应数据库的表中 -->
    <insert id="insert" parameterType="com.yunjian.ak.gateway.entity.apis.ApisClassifyEntity">
        insert into apis_classify
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="pid != null">pid,</if>
            <if test="serviceId != null">service_id,</if>
            <if test="alias != null">alias,</if>
            <if test="memo != null">memo,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="pid != null">#{pid},</if>
            <if test="serviceId != null">#{service_id},</if>
            <if test="alias != null">#{alias},</if>
            <if test="memo != null">#{memo},</if>
        </trim>
    </insert>

    <!-- 将列表中ApisClassify对象数据,同时插入到对应数据库的表中 -->
    <insert id="insertBatch" parameterType="list">
        insert into tb_tenant_domain
        <trim prefix=" (" suffix=")" suffixOverrides=",">
            id,
            pid,
            service_id,
            alias,
            memo,
        </trim>
        VALUES
        <foreach collection="list" item="entity" index="index" separator=",">
            (
            #{entity.id},
            #{entity.pid},
            #{entity.serviceId},
            #{entity.alias},
            #{entity.memo}
            )
        </foreach>
    </insert>

    <!--获得类名为:ApisClassify对应的数据库表满足条件的数据总行数 -->
    <select id="count" parameterType="com.yunjian.ak.gateway.entity.apis.ApisClassifyEntity" resultType="int">
        select count(*) from apis_classify
        <where>
            <include refid="whereClause_sql"/>
        </where>
    </select>

    <!-- 通过ApisClassify的id将ApisClassify中属性值不为null的数据更新到数据库对应的表中 -->
    <update id="update" parameterType="com.yunjian.ak.gateway.entity.apis.ApisClassifyEntity">
        update apis_classify
        <set>
            <trim suffixOverrides=",">
                <if test="pid != null">pid = #{pid},</if>
                <if test="serviceId != null">service_id = #{serviceId},</if>
                <if test="alias != null">alias = #{alias},</if>
                <if test="memo != null">memo = #{memo},</if>
            </trim>
        </set>
        <where>
            <choose>
                <when test="id != null">and id::text = #{id}</when>
                <otherwise>and id::text = </otherwise>
            </choose>
        </where>
    </update>

    <!-- 批量更新 -->
    <update id="updateBatch" parameterType="list">
        <foreach collection="list" index="index" item="item" open="" separator=";" close="">
            update apis_classify
            <set>
                <trim suffixOverrides=",">
                    <if test="item.pid != null">pid = #{item.pid},</if>
                    <if test="item.serviceId != null">service_id = #{item.serviceId},</if>
                    <if test="item.alias != null">alias = #{item.alias},</if>
                    <if test="item.memo != null">memo = #{item.memo},</if>
                </trim>
            </set>
            WHERE id::text = #{item.id}
        </foreach>
    </update>

    <!-- 通过ApisClassify的id将数据库表中对应的数据删除 -->
    <delete id="delete" parameterType="com.yunjian.ak.gateway.entity.apis.ApisClassifyEntity">
        delete from apis_classify where 1=1
        <choose>
            <when test="id != null"> and id::text = #{id}</when>
            <otherwise> and id = </otherwise>
        </choose>
    </delete>

    <!-- 批量删除 -->
    <delete id="deleteBatch">
        delete from apis_classify where id in
        <trim prefix=" (" suffix=")" suffixOverrides=",">
            <foreach collection="list" item="id" separator=",">
                #{id}
            </foreach>
        </trim>
    </delete>

    <!-- 获得一个ApisClassify对象,以参数ApisClassify对象中不为空的属性作为条件进行查询 -->
    <select id="select" parameterType="com.yunjian.ak.gateway.entity.apis.ApisClassifyEntity" resultMap="result_ApisClassify_Map">
        select
        <include refid="column_sql"/>
        from apis_classify
        <where>
            <include refid="whereClause_sql"/>
        </where>
    </select>

    <!-- 查询数据库中表名为:apis_classify的所有数据 -->
    <select id="selectAll" resultMap="result_ApisClassify_Map">
        select
        <include refid="column_sql"/>
        from apis_classify
    </select>

    <!-- 通过ApisClassify的id获得对应数据库中表的数据对象 -->
    <select id="selectByID" parameterType="String" resultMap="result_ApisClassify_Map">
        select
        <include refid="column_sql"/>
        from apis_classify
        where apis_classify.id::text = #{id}
    </select>

    <!-- 获得一个ApisClassify对象,以参数ApisClassify对象中不为空的属性作为条件进行分页查询 -->
    <select id="selectByPage" parameterType="com.yunjian.ak.gateway.entity.apis.ApisClassifyEntity" resultMap="result_ApisClassify_Map">
        select
        <include refid="column_sql"/>
        from apis_classify
        <where>
            <include refid="whereClause_sql"/>
        </where>
    </select>

</mapper>
